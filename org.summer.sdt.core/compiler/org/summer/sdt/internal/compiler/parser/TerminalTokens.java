/*******************************************************************************
 * Copyright (c) 2000, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.summer.sdt.internal.compiler.parser;

/**
 * IMPORTANT NOTE: These constants are dedicated to the internal Scanner implementation.
 * It is mirrored in org.eclipse.jdt.core.compiler public package where it is API.
 * The mirror implementation is using the backward compatible ITerminalSymbols constant
 * definitions (stable with 2.0), whereas the internal implementation uses TerminalTokens
 * which constant values reflect the latest parser generation state.
 */
/**
 * Maps each terminal symbol in the java-grammar into a unique integer.
 * This integer is used to represent the terminal when computing a parsing action.
 *
 * Disclaimer : These constant values are generated automatically using a Java
 * grammar, therefore their actual values are subject to change if new keywords
 * were added to the language (for instance, 'assert' is a keyword in 1.4).
 */
public interface TerminalTokens {

	// special tokens not part of grammar - not autogenerated
	int TokenNameNotAToken = 0,
		TokenNameWHITESPACE = 1000,
		TokenNameCOMMENT_LINE = 1001,
		TokenNameCOMMENT_BLOCK = 1002,
		TokenNameCOMMENT_JAVADOC = 1003;

    public final static int
	    TokenNameIdentifier = 24,
	    TokenNameabstract = 65,
	    TokenNameassert = 84,
	    TokenNameboolean = 36,
	    TokenNamebreak = 85,
	    TokenNamebyte = 37,
	    TokenNamecase = 112,
	    TokenNamecatch = 110,
	    TokenNamechar = 38,
	    TokenNameclass = 80,
	    TokenNamecontinue = 86,
	    TokenNameconst = 123,
	    TokenNamedefault = 81,
	    TokenNamedo = 87,
	    TokenNamedouble = 39,
	    TokenNameelse = 116,
	    TokenNameenum = 95,
	    TokenNameextends = 109,
	    TokenNamefalse = 52,
	    TokenNamefinal = 66,
	    TokenNamefinally = 113,
	    TokenNamefloat = 40,
	    TokenNamefor = 88,
	    TokenNamegoto = 124,
	    TokenNameif = 89,
	    TokenNameimplements = 121,
	    TokenNameimport = 111,
	    TokenNameinstanceof = 17,
	    TokenNameint = 41,
	    TokenNameinterface = 82,
	    TokenNamelong = 42,
	    TokenNamenative = 67,
	    TokenNamenew = 48,
	    TokenNamenull = 53,
	    TokenNamepackage = 108,
	    TokenNameprivate = 68,
	    TokenNameprotected = 69,
	    TokenNamepublic = 70,
	    TokenNamereturn = 90,
	    TokenNameshort = 43,
	    TokenNamestatic = 61,
	    TokenNamestrictfp = 125,
	    TokenNamesuper = 47,
	    TokenNameswitch = 91,
	    TokenNamesynchronized = 92,
	    TokenNamethis = 46,
	    TokenNamethrow = 93,
	    TokenNamethrows = 117,
	    TokenNametransient = 71,
	    TokenNametrue = 54,
	    TokenNametry = 94,
	    TokenNamevoid = 44,
	    TokenNamevolatile = 126,
	    TokenNamewhile = 83,
	    TokenNameref = 62,
	    TokenNameout = 63,
	    TokenNameget = 25,
	    TokenNameset = 26,
	    TokenNameadd = 27,
	    TokenNameremove = 28,
	    TokenNameevent = 118,
	    TokenNamemodule = 114,
	    TokenNamefunction = 49,
	    TokenNameIntegerLiteral = 55,
	    TokenNameLongLiteral = 56,
	    TokenNameFloatingPointLiteral = 57,
	    TokenNameDoubleLiteral = 58,
	    TokenNameCharacterLiteral = 59,
	    TokenNameStringLiteral = 51,
	    TokenNamePLUS_PLUS = 2,
	    TokenNameMINUS_MINUS = 3,
	    TokenNameEQUAL_EQUAL = 20,
	    TokenNameLESS_EQUAL = 14,
	    TokenNameGREATER_EQUAL = 15,
	    TokenNameNOT_EQUAL = 21,
	    TokenNameLEFT_SHIFT = 19,
	    TokenNameRIGHT_SHIFT = 16,
	    TokenNameUNSIGNED_RIGHT_SHIFT = 18,
	    TokenNamePLUS_EQUAL = 97,
	    TokenNameMINUS_EQUAL = 98,
	    TokenNameMULTIPLY_EQUAL = 99,
	    TokenNameDIVIDE_EQUAL = 100,
	    TokenNameAND_EQUAL = 101,
	    TokenNameOR_EQUAL = 102,
	    TokenNameXOR_EQUAL = 103,
	    TokenNameREMAINDER_EQUAL = 104,
	    TokenNameLEFT_SHIFT_EQUAL = 105,
	    TokenNameRIGHT_SHIFT_EQUAL = 106,
	    TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 107,
	    TokenNameOR_OR = 34,
	    TokenNameAND_AND = 33,
	    TokenNamePLUS = 4,
	    TokenNameMINUS = 5,
	    TokenNameNOT = 74,
	    TokenNameREMAINDER = 10,
	    TokenNameXOR = 29,
	    TokenNameAND = 22,
	    TokenNameMULTIPLY = 9,
	    TokenNameOR = 31,
	    TokenNameTWIDDLE = 75,
	    TokenNameDIVIDE = 11,
	    TokenNameGREATER = 13,
	    TokenNameLESS = 7,
	    TokenNameLPAREN = 12,
	    TokenNameRPAREN = 23,
	    TokenNameLBRACE = 64,
	    TokenNameRBRACE = 35,
	    TokenNameLBRACKET = 6,
	    TokenNameRBRACKET = 77,
	    TokenNameSEMICOLON = 30,
	    TokenNameQUESTION = 32,
	    TokenNameCOLON = 72,
	    TokenNameCOMMA = 45,
	    TokenNameDOT = 1,
	    TokenNameEQUAL = 79,
	    TokenNameAT = 50,
	    TokenNameELLIPSIS = 122,
	    TokenNameARROW = 115,
	    TokenNameCOLON_COLON = 8,
	    TokenNameBeginLambda = 60,
	    TokenNameBeginIntersectionCast = 76,
	    TokenNameBeginTypeArguments = 96,
	    TokenNameElidedSemicolonAndRightBrace = 78,
	    TokenNameCLOSE_TAG = 119,
	    TokenNameCLOSE_ELEMENT = 120,
	    TokenNameEOF = 73,
		TokenNameERROR = 127;

}
